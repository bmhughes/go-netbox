// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2020 Samuel Mutel <12967891+smutel@users.noreply.github.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new core API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for core API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CoreDataFilesList(params *CoreDataFilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataFilesListOK, error)

	CoreDataFilesRead(params *CoreDataFilesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataFilesReadOK, error)

	CoreDataSourcesBulkDelete(params *CoreDataSourcesBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesBulkDeleteNoContent, error)

	CoreDataSourcesBulkPartialUpdate(params *CoreDataSourcesBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesBulkPartialUpdateOK, error)

	CoreDataSourcesBulkUpdate(params *CoreDataSourcesBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesBulkUpdateOK, error)

	CoreDataSourcesCreate(params *CoreDataSourcesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesCreateCreated, error)

	CoreDataSourcesDelete(params *CoreDataSourcesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesDeleteNoContent, error)

	CoreDataSourcesList(params *CoreDataSourcesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesListOK, error)

	CoreDataSourcesPartialUpdate(params *CoreDataSourcesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesPartialUpdateOK, error)

	CoreDataSourcesRead(params *CoreDataSourcesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesReadOK, error)

	CoreDataSourcesSync(params *CoreDataSourcesSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesSyncCreated, error)

	CoreDataSourcesUpdate(params *CoreDataSourcesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesUpdateOK, error)

	CoreJobsList(params *CoreJobsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreJobsListOK, error)

	CoreJobsRead(params *CoreJobsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreJobsReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CoreDataFilesList core data files list API
*/
func (a *Client) CoreDataFilesList(params *CoreDataFilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataFilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataFilesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-files_list",
		Method:             "GET",
		PathPattern:        "/core/data-files/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataFilesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataFilesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-files_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataFilesRead core data files read API
*/
func (a *Client) CoreDataFilesRead(params *CoreDataFilesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataFilesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataFilesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-files_read",
		Method:             "GET",
		PathPattern:        "/core/data-files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataFilesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataFilesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-files_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesBulkDelete core data sources bulk delete API
*/
func (a *Client) CoreDataSourcesBulkDelete(params *CoreDataSourcesBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesBulkDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesBulkDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_bulk_delete",
		Method:             "DELETE",
		PathPattern:        "/core/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesBulkDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesBulkDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_bulk_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesBulkPartialUpdate core data sources bulk partial update API
*/
func (a *Client) CoreDataSourcesBulkPartialUpdate(params *CoreDataSourcesBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesBulkPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesBulkPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_bulk_partial_update",
		Method:             "PATCH",
		PathPattern:        "/core/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesBulkPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesBulkPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_bulk_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesBulkUpdate core data sources bulk update API
*/
func (a *Client) CoreDataSourcesBulkUpdate(params *CoreDataSourcesBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesBulkUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesBulkUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_bulk_update",
		Method:             "PUT",
		PathPattern:        "/core/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesBulkUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesBulkUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_bulk_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesCreate core data sources create API
*/
func (a *Client) CoreDataSourcesCreate(params *CoreDataSourcesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_create",
		Method:             "POST",
		PathPattern:        "/core/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesDelete core data sources delete API
*/
func (a *Client) CoreDataSourcesDelete(params *CoreDataSourcesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_delete",
		Method:             "DELETE",
		PathPattern:        "/core/data-sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesList core data sources list API
*/
func (a *Client) CoreDataSourcesList(params *CoreDataSourcesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_list",
		Method:             "GET",
		PathPattern:        "/core/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesPartialUpdate core data sources partial update API
*/
func (a *Client) CoreDataSourcesPartialUpdate(params *CoreDataSourcesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_partial_update",
		Method:             "PATCH",
		PathPattern:        "/core/data-sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesRead core data sources read API
*/
func (a *Client) CoreDataSourcesRead(params *CoreDataSourcesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_read",
		Method:             "GET",
		PathPattern:        "/core/data-sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesSync Enqueue a job to synchronize the DataSource.
*/
func (a *Client) CoreDataSourcesSync(params *CoreDataSourcesSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesSyncCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesSyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_sync",
		Method:             "POST",
		PathPattern:        "/core/data-sources/{id}/sync/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesSyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesSyncCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_sync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreDataSourcesUpdate core data sources update API
*/
func (a *Client) CoreDataSourcesUpdate(params *CoreDataSourcesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_update",
		Method:             "PUT",
		PathPattern:        "/core/data-sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_data-sources_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreJobsList Retrieve a list of job results
*/
func (a *Client) CoreJobsList(params *CoreJobsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreJobsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreJobsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_jobs_list",
		Method:             "GET",
		PathPattern:        "/core/jobs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreJobsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreJobsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_jobs_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CoreJobsRead Retrieve a list of job results
*/
func (a *Client) CoreJobsRead(params *CoreJobsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreJobsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreJobsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_jobs_read",
		Method:             "GET",
		PathPattern:        "/core/jobs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreJobsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreJobsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_jobs_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
