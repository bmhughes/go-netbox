// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2020 Samuel Mutel <12967891+smutel@users.noreply.github.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//

package extras

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smutel/go-netbox/v3/netbox/models"
)

// ExtrasWebhooksReadReader is a Reader for the ExtrasWebhooksRead structure.
type ExtrasWebhooksReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtrasWebhooksReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtrasWebhooksReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtrasWebhooksReadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewExtrasWebhooksReadDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExtrasWebhooksReadOK creates a ExtrasWebhooksReadOK with default headers values
func NewExtrasWebhooksReadOK() *ExtrasWebhooksReadOK {
	return &ExtrasWebhooksReadOK{}
}

/*
ExtrasWebhooksReadOK describes a response with status code 200, with default header values.

ExtrasWebhooksReadOK extras webhooks read o k
*/
type ExtrasWebhooksReadOK struct {
	Payload *models.Webhook
}

// IsSuccess returns true when this extras webhooks read o k response has a 2xx status code
func (o *ExtrasWebhooksReadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this extras webhooks read o k response has a 3xx status code
func (o *ExtrasWebhooksReadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this extras webhooks read o k response has a 4xx status code
func (o *ExtrasWebhooksReadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this extras webhooks read o k response has a 5xx status code
func (o *ExtrasWebhooksReadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this extras webhooks read o k response a status code equal to that given
func (o *ExtrasWebhooksReadOK) IsCode(code int) bool {
	return code == 200
}

func (o *ExtrasWebhooksReadOK) Error() string {
	return fmt.Sprintf("[GET /extras/webhooks/{id}/][%d] extrasWebhooksReadOK  %+v", 200, o.Payload)
}

func (o *ExtrasWebhooksReadOK) String() string {
	return fmt.Sprintf("[GET /extras/webhooks/{id}/][%d] extrasWebhooksReadOK  %+v", 200, o.Payload)
}

func (o *ExtrasWebhooksReadOK) GetPayload() *models.Webhook {
	return o.Payload
}

func (o *ExtrasWebhooksReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Webhook)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtrasWebhooksReadBadRequest creates a ExtrasWebhooksReadBadRequest with default headers values
func NewExtrasWebhooksReadBadRequest() *ExtrasWebhooksReadBadRequest {
	return &ExtrasWebhooksReadBadRequest{}
}

/*
ExtrasWebhooksReadBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtrasWebhooksReadBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this extras webhooks read bad request response has a 2xx status code
func (o *ExtrasWebhooksReadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this extras webhooks read bad request response has a 3xx status code
func (o *ExtrasWebhooksReadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this extras webhooks read bad request response has a 4xx status code
func (o *ExtrasWebhooksReadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this extras webhooks read bad request response has a 5xx status code
func (o *ExtrasWebhooksReadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this extras webhooks read bad request response a status code equal to that given
func (o *ExtrasWebhooksReadBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ExtrasWebhooksReadBadRequest) Error() string {
	return fmt.Sprintf("[GET /extras/webhooks/{id}/][%d] extrasWebhooksReadBadRequest  %+v", 400, o.Payload)
}

func (o *ExtrasWebhooksReadBadRequest) String() string {
	return fmt.Sprintf("[GET /extras/webhooks/{id}/][%d] extrasWebhooksReadBadRequest  %+v", 400, o.Payload)
}

func (o *ExtrasWebhooksReadBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *ExtrasWebhooksReadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtrasWebhooksReadDefault creates a ExtrasWebhooksReadDefault with default headers values
func NewExtrasWebhooksReadDefault(code int) *ExtrasWebhooksReadDefault {
	return &ExtrasWebhooksReadDefault{
		_statusCode: code,
	}
}

/*
ExtrasWebhooksReadDefault describes a response with status code -1, with default header values.

Unexpected Response
*/
type ExtrasWebhooksReadDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the extras webhooks read default response
func (o *ExtrasWebhooksReadDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this extras webhooks read default response has a 2xx status code
func (o *ExtrasWebhooksReadDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this extras webhooks read default response has a 3xx status code
func (o *ExtrasWebhooksReadDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this extras webhooks read default response has a 4xx status code
func (o *ExtrasWebhooksReadDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this extras webhooks read default response has a 5xx status code
func (o *ExtrasWebhooksReadDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this extras webhooks read default response a status code equal to that given
func (o *ExtrasWebhooksReadDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ExtrasWebhooksReadDefault) Error() string {
	return fmt.Sprintf("[GET /extras/webhooks/{id}/][%d] extras_webhooks_read default  %+v", o._statusCode, o.Payload)
}

func (o *ExtrasWebhooksReadDefault) String() string {
	return fmt.Sprintf("[GET /extras/webhooks/{id}/][%d] extras_webhooks_read default  %+v", o._statusCode, o.Payload)
}

func (o *ExtrasWebhooksReadDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *ExtrasWebhooksReadDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
