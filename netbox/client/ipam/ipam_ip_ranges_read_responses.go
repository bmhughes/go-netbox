// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2020 Samuel Mutel <12967891+smutel@users.noreply.github.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//

package ipam

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smutel/go-netbox/v3/netbox/models"
)

// IpamIPRangesReadReader is a Reader for the IpamIPRangesRead structure.
type IpamIPRangesReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IpamIPRangesReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIpamIPRangesReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIpamIPRangesReadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIpamIPRangesReadDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIpamIPRangesReadOK creates a IpamIPRangesReadOK with default headers values
func NewIpamIPRangesReadOK() *IpamIPRangesReadOK {
	return &IpamIPRangesReadOK{}
}

/*
IpamIPRangesReadOK describes a response with status code 200, with default header values.

IpamIPRangesReadOK ipam Ip ranges read o k
*/
type IpamIPRangesReadOK struct {
	Payload *models.IPRange
}

// IsSuccess returns true when this ipam Ip ranges read o k response has a 2xx status code
func (o *IpamIPRangesReadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ipam Ip ranges read o k response has a 3xx status code
func (o *IpamIPRangesReadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ipam Ip ranges read o k response has a 4xx status code
func (o *IpamIPRangesReadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ipam Ip ranges read o k response has a 5xx status code
func (o *IpamIPRangesReadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ipam Ip ranges read o k response a status code equal to that given
func (o *IpamIPRangesReadOK) IsCode(code int) bool {
	return code == 200
}

func (o *IpamIPRangesReadOK) Error() string {
	return fmt.Sprintf("[GET /ipam/ip-ranges/{id}/][%d] ipamIpRangesReadOK  %+v", 200, o.Payload)
}

func (o *IpamIPRangesReadOK) String() string {
	return fmt.Sprintf("[GET /ipam/ip-ranges/{id}/][%d] ipamIpRangesReadOK  %+v", 200, o.Payload)
}

func (o *IpamIPRangesReadOK) GetPayload() *models.IPRange {
	return o.Payload
}

func (o *IpamIPRangesReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPRange)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIpamIPRangesReadBadRequest creates a IpamIPRangesReadBadRequest with default headers values
func NewIpamIPRangesReadBadRequest() *IpamIPRangesReadBadRequest {
	return &IpamIPRangesReadBadRequest{}
}

/*
IpamIPRangesReadBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type IpamIPRangesReadBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this ipam Ip ranges read bad request response has a 2xx status code
func (o *IpamIPRangesReadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ipam Ip ranges read bad request response has a 3xx status code
func (o *IpamIPRangesReadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ipam Ip ranges read bad request response has a 4xx status code
func (o *IpamIPRangesReadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ipam Ip ranges read bad request response has a 5xx status code
func (o *IpamIPRangesReadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ipam Ip ranges read bad request response a status code equal to that given
func (o *IpamIPRangesReadBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *IpamIPRangesReadBadRequest) Error() string {
	return fmt.Sprintf("[GET /ipam/ip-ranges/{id}/][%d] ipamIpRangesReadBadRequest  %+v", 400, o.Payload)
}

func (o *IpamIPRangesReadBadRequest) String() string {
	return fmt.Sprintf("[GET /ipam/ip-ranges/{id}/][%d] ipamIpRangesReadBadRequest  %+v", 400, o.Payload)
}

func (o *IpamIPRangesReadBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *IpamIPRangesReadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIpamIPRangesReadDefault creates a IpamIPRangesReadDefault with default headers values
func NewIpamIPRangesReadDefault(code int) *IpamIPRangesReadDefault {
	return &IpamIPRangesReadDefault{
		_statusCode: code,
	}
}

/*
IpamIPRangesReadDefault describes a response with status code -1, with default header values.

Unexpected Response
*/
type IpamIPRangesReadDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the ipam ip ranges read default response
func (o *IpamIPRangesReadDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this ipam ip ranges read default response has a 2xx status code
func (o *IpamIPRangesReadDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this ipam ip ranges read default response has a 3xx status code
func (o *IpamIPRangesReadDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this ipam ip ranges read default response has a 4xx status code
func (o *IpamIPRangesReadDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this ipam ip ranges read default response has a 5xx status code
func (o *IpamIPRangesReadDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this ipam ip ranges read default response a status code equal to that given
func (o *IpamIPRangesReadDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *IpamIPRangesReadDefault) Error() string {
	return fmt.Sprintf("[GET /ipam/ip-ranges/{id}/][%d] ipam_ip-ranges_read default  %+v", o._statusCode, o.Payload)
}

func (o *IpamIPRangesReadDefault) String() string {
	return fmt.Sprintf("[GET /ipam/ip-ranges/{id}/][%d] ipam_ip-ranges_read default  %+v", o._statusCode, o.Payload)
}

func (o *IpamIPRangesReadDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *IpamIPRangesReadDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
