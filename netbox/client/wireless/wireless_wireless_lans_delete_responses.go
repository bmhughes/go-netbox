// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2020 Samuel Mutel <12967891+smutel@users.noreply.github.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// WirelessWirelessLansDeleteReader is a Reader for the WirelessWirelessLansDelete structure.
type WirelessWirelessLansDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WirelessWirelessLansDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewWirelessWirelessLansDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWirelessWirelessLansDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewWirelessWirelessLansDeleteNoContent creates a WirelessWirelessLansDeleteNoContent with default headers values
func NewWirelessWirelessLansDeleteNoContent() *WirelessWirelessLansDeleteNoContent {
	return &WirelessWirelessLansDeleteNoContent{}
}

/*
WirelessWirelessLansDeleteNoContent describes a response with status code 204, with default header values.

WirelessWirelessLansDeleteNoContent wireless wireless lans delete no content
*/
type WirelessWirelessLansDeleteNoContent struct {
}

// IsSuccess returns true when this wireless wireless lans delete no content response has a 2xx status code
func (o *WirelessWirelessLansDeleteNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this wireless wireless lans delete no content response has a 3xx status code
func (o *WirelessWirelessLansDeleteNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this wireless wireless lans delete no content response has a 4xx status code
func (o *WirelessWirelessLansDeleteNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this wireless wireless lans delete no content response has a 5xx status code
func (o *WirelessWirelessLansDeleteNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this wireless wireless lans delete no content response a status code equal to that given
func (o *WirelessWirelessLansDeleteNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *WirelessWirelessLansDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /wireless/wireless-lans/{id}/][%d] wirelessWirelessLansDeleteNoContent ", 204)
}

func (o *WirelessWirelessLansDeleteNoContent) String() string {
	return fmt.Sprintf("[DELETE /wireless/wireless-lans/{id}/][%d] wirelessWirelessLansDeleteNoContent ", 204)
}

func (o *WirelessWirelessLansDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewWirelessWirelessLansDeleteBadRequest creates a WirelessWirelessLansDeleteBadRequest with default headers values
func NewWirelessWirelessLansDeleteBadRequest() *WirelessWirelessLansDeleteBadRequest {
	return &WirelessWirelessLansDeleteBadRequest{}
}

/*
WirelessWirelessLansDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WirelessWirelessLansDeleteBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this wireless wireless lans delete bad request response has a 2xx status code
func (o *WirelessWirelessLansDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this wireless wireless lans delete bad request response has a 3xx status code
func (o *WirelessWirelessLansDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this wireless wireless lans delete bad request response has a 4xx status code
func (o *WirelessWirelessLansDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this wireless wireless lans delete bad request response has a 5xx status code
func (o *WirelessWirelessLansDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this wireless wireless lans delete bad request response a status code equal to that given
func (o *WirelessWirelessLansDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *WirelessWirelessLansDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /wireless/wireless-lans/{id}/][%d] wirelessWirelessLansDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *WirelessWirelessLansDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /wireless/wireless-lans/{id}/][%d] wirelessWirelessLansDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *WirelessWirelessLansDeleteBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *WirelessWirelessLansDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
